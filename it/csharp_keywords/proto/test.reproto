use true as t;

type Entry {
  abstract: string;
  _as: string;
  base: string;
  bool: string;
  break: string;
  byte: string;
  case: string;
  catch: string;
  char: string;
  checked: string;
  class: string;
  const: string;
  continue: string;
  decimal: string;
  default: string;
  delegate: string;
  do: string;
  _double: string;
  else: string;
  _enum: string;
  event: string;
  explicit: string;
  extern: string;
  _false: string;
  finally: string;
  fixed: string;
  _float: string;
  for: string;
  foreach: string;
  goto: string;
  if: string;
  implicit: string;
  in: string;
  int: string;
  _interface: string;
  internal: string;
  is: string;
  lock: string;
  long: string;
  namespace: string;
  new: string;
  null: string;
  object: string;
  operator: string;
  out: string;
  override: string;
  params: string;
  private: string;
  protected: string;
  public: string;
  readonly: string;
  ref: string;
  return: string;
  sbyte: string;
  sealed: string;
  short: string;
  sizeof: string;
  stackalloc: string;
  static: string;
  _string: string;
  struct: string;
  switch: string;
  this: string;
  throw: string;
  _true: string;
  try: string;
  typeof: string;
  uint: string;
  ulong: string;
  unchecked: string;
  unsafe: string;
  ushort: string;
  using: string;
  virtual: string;
  void: string;
  volatile: string;
  while: string;
}

service Keywords {
  abstract() -> string;
  _as() -> string;
  base() -> string;
  bool() -> string;
  break() -> string;
  byte() -> string;
  case() -> string;
  catch() -> string;
  char() -> string;
  checked() -> string;
  class() -> string;
  const() -> string;
  continue() -> string;
  decimal() -> string;
  default() -> string;
  delegate() -> string;
  do() -> string;
  _double() -> string;
  else() -> string;
  _enum() -> string;
  event() -> string;
  explicit() -> string;
  extern() -> string;
  _false() -> string;
  finally() -> string;
  fixed() -> string;
  _float() -> string;
  for() -> string;
  foreach() -> string;
  goto() -> string;
  if() -> string;
  implicit() -> string;
  in() -> string;
  int() -> string;
  _interface() -> string;
  internal() -> string;
  is() -> string;
  lock() -> string;
  long() -> string;
  namespace() -> string;
  new() -> string;
  null() -> string;
  object() -> string;
  operator() -> string;
  out() -> string;
  override() -> string;
  params() -> string;
  private() -> string;
  protected() -> string;
  public() -> string;
  readonly() -> string;
  ref() -> string;
  return() -> string;
  sbyte() -> string;
  sealed() -> string;
  short() -> string;
  sizeof() -> string;
  stackalloc() -> string;
  static() -> string;
  _string() -> string;
  struct() -> string;
  switch() -> string;
  this() -> string;
  throw() -> string;
  _true() -> string;
  try() -> string;
  typeof() -> string;
  uint() -> string;
  ulong() -> string;
  unchecked() -> string;
  unsafe() -> string;
  ushort() -> string;
  using() -> string;
  virtual() -> string;
  void() -> string;
  volatile() -> string;
  while() -> string;
}
