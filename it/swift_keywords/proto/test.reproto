use true as t;

type Entry {
  _as?: string;
  associatedtype?: string;
  associativity?: string;
  break?: string;
  case?: string;
  catch?: string;
  class?: string;
  continue?: string;
  convenience?: string;
  default?: string;
  defer?: string;
  deinit?: string;
  do?: string;
  dynamic?: string;
  else?: string;
  _enum?: string;
  extension?: string;
  fallthrough?: string;
  _false?: string;
  fileprivate?: string;
  final?: string;
  for?: string;
  func?: string;
  get?: string;
  guard?: string;
  if?: string;
  import?: string;
  in?: string;
  indirect?: string;
  infix?: string;
  init?: string;
  inout?: string;
  internal?: string;
  is?: string;
  lazy?: string;
  left?: string;
  let?: string;
  mutating?: string;
  nil?: string;
  none?: string;
  nonmutating?: string;
  open?: string;
  operator?: string;
  optional?: string;
  override?: string;
  postfix?: string;
  precedence?: string;
  prefix?: string;
  private?: string;
  protocol?: string;
  public?: string;
  repeat?: string;
  required?: string;
  rethrows?: string;
  return?: string;
  right?: string;
  self?: string;
  set?: string;
  static?: string;
  struct?: string;
  subscript?: string;
  super?: string;
  switch?: string;
  throw?: string;
  throws?: string;
  _true?: string;
  try?: string;
  typealias?: string;
  unowned?: string;
  var?: string;
  weak?: string;
  where?: string;
  while?: string;
}

service Keywords {
}
