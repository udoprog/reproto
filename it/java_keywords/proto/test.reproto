use true as t;

type Entry {
    abstract?: string;
    assert?: string;
    _boolean?: string;
    break?: string;
    byte?: string;
    case?: string;
    catch?: string;
    char?: string;
    class?: string;
    const?: string;
    continue?: string;
    default?: string;
    do?: string;
    _double?: string;
    else?: string;
    _enum?: string;
    extends?: string;
    _false?: string;
    final?: string;
    finally?: string;
    _float?: string;
    for?: string;
    goto?: string;
    if?: string;
    implements?: string;
    import?: string;
    imported?: t::Empty;
    instanceof?: string;
    int?: string;
    _interface?: string;
    long?: string;
    native?: string;
    new?: string;
    null?: string;
    package?: string;
    private?: string;
    protected?: string;
    public?: string;
    return?: string;
    short?: string;
    static?: string;
    strictfp?: string;
    super?: string;
    switch?: string;
    synchronized?: string;
    this?: string;
    throw?: string;
    throws?: string;
    transient?: string;
    _true?: string;
    try?: string;
    void?: string;
    volatile?: string;
    while?: string;
}

service Keywords {
    abstract() -> string;
    assert() -> string;
    _boolean() -> string;
    break() -> string;
    byte() -> string;
    case() -> string;
    catch() -> string;
    char() -> string;
    class() -> string;
    const() -> string;
    continue() -> string;
    default() -> string;
    do() -> string;
    _double() -> string;
    else() -> string;
    _enum() -> string;
    extends() -> string;
    _false() -> string;
    final() -> string;
    finally() -> string;
    _float() -> string;
    for() -> string;
    goto() -> string;
    if() -> string;
    implements() -> string;
    import() -> string;
    instanceof() -> string;
    int() -> string;
    _interface() -> string;
    long() -> string;
    native() -> string;
    new() -> string;
    null() -> string;
    package() -> string;
    private() -> string;
    protected() -> string;
    public() -> string;
    return() -> string;
    short() -> string;
    static() -> string;
    strictfp() -> string;
    super() -> string;
    switch() -> string;
    synchronized() -> string;
    this() -> string;
    throw() -> string;
    throws() -> string;
    transient() -> string;
    _true() -> string;
    try() -> string;
    void() -> string;
    volatile() -> string;
    while() -> string;
}
